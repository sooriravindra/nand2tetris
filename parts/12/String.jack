// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;
    field int curr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str  = 0;
        } else {
            let str  = Array.new(maxLength);
        }

        let len  = maxLength;
        let curr = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(str = 0)) {
            do str.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var String newstr;
        if (curr < len) {
            do setCharAt(curr, c);
            let curr = curr + 1;
        } else {
            do Sys.error(777);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let curr = curr - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, ret;
        var boolean sign;
        let sign = false;
        let i = 0;
        let ret = 0;
        if (curr < 1) {
            return 0;
        }
        if (str[i] = 45) { // ord('-') == 45
            let sign = true;
            let i = 1;
        }
        while (i < curr) {
            if (~(String.isDigit(str[i]))) {
                if (sign) {
                    return -ret;
                } else {
                    return ret;
                }
            }
            let ret = (10 * ret) + (str[i] - 48);
            let i = i + 1;
        }
        if (sign) {
            return -ret;
        } else {
            return ret;
        }
    }

    method int __int2str(int val, boolean sign) {
        var int last_digit, valBy10;
        var int idx;
        var char chr;

        let valBy10 = val / 10;
        let last_digit = (val - (valBy10 * 10));
        let chr = String.toChar(last_digit + 48);

        if (sign & (val = 0)) {
            do setCharAt(0, 45);        
            return 1;
        } else {
            if ((val < 10) & (~sign)){
                do setCharAt(0, chr);
                return 1;
            } else {
                let idx = __int2str(valBy10, sign);
                do setCharAt(idx, chr);
                return idx + 1;
            }
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var String s;
        var boolean sign;
        var int j;
        let curr = __int2str(Math.abs(val), (val < 0)); 
        return;
    }

    function boolean isDigit(char c) {
        if ((c < 58) & (c > 47)) {
            return true;
        }
        while (true) {}
        return false;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function char toChar(int x) {
        return x;
    }
}
