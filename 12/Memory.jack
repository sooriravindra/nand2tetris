// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM, freelist;

    /** Initializes the class. */
    function void init() {
        let RAM  = 0;
        let freelist = 2048;
        let freelist[0] = 14334;
        let freelist[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr, prev;
        var int ret;

        if (freelist = 0) {
            do Sys.error(46);
        }

        let curr = freelist;
        let prev = 0;

        while (~(curr = 0)) {
            if (curr[0] > (size + 1)) { // >= size + 2
                if ((curr[0] - (size + 1)) > 1) {
                    // Split
                    let ret = curr +  2;
                    if (prev) {
                        let curr    = curr + size + 2;
                        let curr[0] = Memory.peek(ret - 2) - (size + 2);
                        let curr[1] = Memory.peek(ret - 1);
                        let prev[1] = curr;
                    } else {
                        let freelist    = curr + size + 2;
                        let freelist[0] = Memory.peek(ret - 2) - (size + 2);
                        let freelist[1] = Memory.peek(ret - 1);
                    }
                    let ret[0] = size + 2;
                    return ret;
                } else {
                    // return the current freelist in entirety
                    if (prev) {
                        let prev[1] = curr[1];
                    } else {
                        let freelist = 0;
                    }
                    let ret = curr + 2;
                    return ret;
                }
            }
            let prev = curr;
            let curr = curr[1];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        let object[-1] = freelist;
        let freelist = object - 2;
        return;
    }    
}
